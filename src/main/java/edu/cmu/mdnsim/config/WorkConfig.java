package edu.cmu.mdnsim.config;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import edu.cmu.mdnsim.messagebus.message.MbMessage;
import edu.cmu.mdnsim.config.Flow;

/*
Example JSON object representing the following topology
                 orange:source1
                       |
                 tomato:processing1
                       |
                 apple:relay1
                       |________________
                       |               | 
                 apple:sink1       apple:sink2      
{
"SimId":"sim1",
"StreamList":
  [
	{
	  "StreamId":"stream1234",
	  "DataSize":"20000000",
	  "KiloBitRate":"625000",
	  "FlowList":
	  [
		  {
			  [
				{
				  "NodeType":"SinkNode",
				  "NodeId":"tomato:sink1",
				  "UpstreamId":"apple:relay1"
				},
				{
				  "NodeType":"RelayNode",
				  "NodeId":"apple:relay1",
				  "UpstreamId":"tomato:processing1"
				}
				{
				  "NodeType":"ProcessingNode",
				  "NodeId":"tomato:processing1",
				  "UpstreamId":"orange:source1",
				  "ProcessingLoop":"100000",
				  "ProcessingMemory":"1000"
				},
				{
				  "NodeType":"SourceNode",
				  "NodeId":"orange:source1",
				  "UpstreamId":"NULL"
				}
			  ]
		  },
		  {
			  [
				{
				  "NodeType":"SinkNode",
				  "NodeId":"tomato:sink2",
				  "UpstreamId":"apple:relay1"
				},
				{
				  "NodeType":"RelayNode",
				  "NodeId":"apple:relay1",
				  "UpstreamId":"tomato:processing1"
				}
				{
				  "NodeType":"ProcessingNode",
				  "NodeId":"tomato:processing1",
				  "UpstreamId":"orange:source1",
				  "ProcessingLoop":"100000",
				  "ProcessingMemory":"1000"
				},
				{
				  "NodeType":"SourceNode",
				  "NodeId":"orange:source1",
				  "UpstreamId":"NULL"
				}
			  ]
		  }
	  ]
	}
  ]
}
 */
/**
 * The work config given by the user will have a list of stream specification,
 * called the StreamList. This is a list of distinctly named streams of data.
 * A stream represents a unique media file like a video/movie/podcast etc. 
 * The StreamList will contain a unique StreamId, a KiloBitRate and the size of the
 * file in KiloBits. It also has a FlowList. The FlowList is a list of unique paths 
 * from the sink to the source that are receiving a particular Stream.
 * The StreamId is user specified. The FlowId is generated by the system as the
 * concatenation of NodeLabels in the flow.
 * @author CMU-SV Ericsson Media Team
 *
 */
public class WorkConfig extends MbMessage{

	private String simId;
	private List<Stream> streamList = new LinkedList<Stream>();

	public List<Stream> getStreamList() {
		return streamList;
	}

	public void setStreamList(List<Stream> streamSpecList) {
		this.streamList = streamSpecList;
	}
	
	public void addStream(Stream stream){
		this.streamList.add(stream);
	}

	public String getSimId() {
		return simId;
	}

	public void setSimId(String simId) {
		this.simId = simId;
	}
	
	@Override
	public String toString() {
		
		StringBuilder sb = new StringBuilder();
		for (Stream stream : this.getStreamList()) {
			sb.append("StreamSpec:");
			sb.append("StreamId: "+stream.StreamId);
			sb.append("DataSize: "+stream.DataSize);
			sb.append("KiloBitRate: "+stream.KiloBitRate);
			for (Flow flow : stream.getFlowList()) {
				for (Map<String, String> node : flow.NodeList) {
					sb.append("[nodeId" 
							+ node.get("NodeId") + "]\t[UpstreamId" + node.get("UpstreamId") 
							+ "]\t[DownstreamId" + node.get("DownstreamId") + "]");
				}
			}
		}
		return sb.toString();
		
	}
}
